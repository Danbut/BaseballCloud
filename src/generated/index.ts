import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** Autogenerated input type of AddBillingMethod */
export type AddBillingMethodInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  exp_month?: Maybe<Scalars['String']>;
  exp_year?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  cvc?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddBillingMethod */
export type AddBillingMethodPayload = {
  __typename?: 'AddBillingMethodPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
};

export type BattingData = {
  __typename?: 'BattingData';
  batter_datraks_id?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['String']>;
  direction?: Maybe<Scalars['Int']>;
  distance?: Maybe<Scalars['String']>;
  exit_velocity?: Maybe<Scalars['Float']>;
  hang_time?: Maybe<Scalars['String']>;
  hit_spin_rate?: Maybe<Scalars['Int']>;
  launch_angle?: Maybe<Scalars['Int']>;
  pitch_call?: Maybe<Scalars['String']>;
  pitch_type?: Maybe<Scalars['String']>;
  pitcher_datraks_id?: Maybe<Scalars['Int']>;
  pitcher_handedness?: Maybe<Scalars['String']>;
  pitcher_name?: Maybe<Scalars['String']>;
  release_height?: Maybe<Scalars['Int']>;
  release_side?: Maybe<Scalars['Int']>;
};

export type BillingMethod = {
  __typename?: 'BillingMethod';
  address_zip_check?: Maybe<Scalars['String']>;
  brand?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  cvc_check?: Maybe<Scalars['String']>;
  exp_month?: Maybe<Scalars['String']>;
  exp_year?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  last4?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  object?: Maybe<Scalars['String']>;
};

export type BillingMethodRowsResult = {
  __typename?: 'BillingMethodRowsResult';
  billing_methods?: Maybe<Array<Maybe<BillingMethod>>>;
  total_count?: Maybe<Scalars['Int']>;
};

export type Event = {
  __typename?: 'Event';
  data_rows_count?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['String']>;
  event_name?: Maybe<Scalars['String']>;
  event_type?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  is_pitcher?: Maybe<Scalars['Boolean']>;
  recent_avatars?: Maybe<Array<Maybe<RecentAvatarsType>>>;
  team1?: Maybe<Team>;
  team2?: Maybe<Team>;
};

export type EventDetailType = {
  __typename?: 'EventDetailType';
  data_rows_count?: Maybe<Scalars['Int']>;
  event?: Maybe<Event>;
  is_pitcher?: Maybe<Scalars['Boolean']>;
  opened?: Maybe<Scalars['Boolean']>;
  profile?: Maybe<Scalars['String']>;
};

export type EventHittingSummaryType = {
  __typename?: 'EventHittingSummaryType';
  hitting_summary_rows?: Maybe<Array<Maybe<FlightScopeDataRowType>>>;
};

export type EventMlbComparisonHitBallRowType = {
  __typename?: 'EventMlbComparisonHitBallRowType';
  exit_velocity?: Maybe<Scalars['String']>;
  launch_angle?: Maybe<Scalars['String']>;
};

export type EventMlbComparisonTeamHitBallRowType = {
  __typename?: 'EventMlbComparisonTeamHitBallRowType';
  batter_team?: Maybe<Scalars['String']>;
  exit_velocity?: Maybe<Scalars['String']>;
  launch_angle?: Maybe<Scalars['String']>;
};

export type EventMlbComparisonTeamSpinRateRowType = {
  __typename?: 'EventMlbComparisonTeamSpinRateRowType';
  pitch_type?: Maybe<Scalars['String']>;
  pitcher_team?: Maybe<Scalars['String']>;
  spin_rate_avg?: Maybe<Scalars['String']>;
  spin_rate_max?: Maybe<Scalars['String']>;
  spin_rate_min?: Maybe<Scalars['String']>;
};

export type EventMlbComparisonTeamVelocityRowType = {
  __typename?: 'EventMlbComparisonTeamVelocityRowType';
  pitch_type?: Maybe<Scalars['String']>;
  pitcher_team?: Maybe<Scalars['String']>;
  velocity_avg?: Maybe<Scalars['String']>;
  velocity_max?: Maybe<Scalars['String']>;
  velocity_min?: Maybe<Scalars['String']>;
};

export type EventMlbComparisonType = {
  __typename?: 'EventMlbComparisonType';
  hitter_table_player_avg?: Maybe<
    Array<Maybe<EventMlbComparisonHitBallRowType>>
  >;
  hitter_table_teams_avg?: Maybe<
    Array<Maybe<EventMlbComparisonTeamHitBallRowType>>
  >;
  pitcher_table_spin_rate_teams_avg?: Maybe<
    Array<Maybe<EventMlbComparisonTeamSpinRateRowType>>
  >;
  pitcher_table_velocity_teams_avg?: Maybe<
    Array<Maybe<EventMlbComparisonTeamVelocityRowType>>
  >;
};

export type EventPitchingSummaryTableType = {
  __typename?: 'EventPitchingSummaryTableType';
  avg_spin?: Maybe<Scalars['String']>;
  avg_velo?: Maybe<Scalars['String']>;
  ball_count?: Maybe<Scalars['Int']>;
  called_strike_count?: Maybe<Scalars['Int']>;
  max_spin?: Maybe<Scalars['String']>;
  max_velo?: Maybe<Scalars['String']>;
  pitch_count?: Maybe<Scalars['Int']>;
  pitch_type?: Maybe<Scalars['String']>;
  pitcher_name?: Maybe<Scalars['String']>;
  pitcher_team?: Maybe<Scalars['String']>;
  swing_strike_count?: Maybe<Scalars['Int']>;
};

export type EventPitchingSummaryType = {
  __typename?: 'EventPitchingSummaryType';
  pitching_summary_rows?: Maybe<Array<Maybe<EventPitchingSummaryTableType>>>;
  velocity_chart_rows?: Maybe<
    Array<Maybe<EventPitchingSummaryVelocityChartType>>
  >;
};

export type EventPitchingSummaryVelocityChartType = {
  __typename?: 'EventPitchingSummaryVelocityChartType';
  pitch_type?: Maybe<Scalars['String']>;
  pitcher_name?: Maybe<Scalars['String']>;
  pitcher_team?: Maybe<Scalars['String']>;
  velo?: Maybe<Scalars['String']>;
};

export type EventPlayerSummaryHittingTableType = {
  __typename?: 'EventPlayerSummaryHittingTableType';
  direction?: Maybe<Scalars['String']>;
  distance?: Maybe<Scalars['String']>;
  exit_velocity?: Maybe<Scalars['String']>;
  launch_angle?: Maybe<Scalars['String']>;
  pitch_call?: Maybe<Scalars['String']>;
  pitch_type?: Maybe<Scalars['String']>;
};

export type EventPlayerSummaryHittingZoneType = {
  __typename?: 'EventPlayerSummaryHittingZoneType';
  height_at_plate?: Maybe<Scalars['Float']>;
  pitch_type?: Maybe<Scalars['String']>;
  side_at_plate?: Maybe<Scalars['Float']>;
};

export type EventPlayerSummaryPitchingTableType = {
  __typename?: 'EventPlayerSummaryPitchingTableType';
  avg_spin?: Maybe<Scalars['String']>;
  avg_velo?: Maybe<Scalars['String']>;
  ball_count?: Maybe<Scalars['Int']>;
  called_strike_count?: Maybe<Scalars['Int']>;
  max_spin?: Maybe<Scalars['String']>;
  max_velo?: Maybe<Scalars['String']>;
  pitch_count?: Maybe<Scalars['Int']>;
  pitch_type?: Maybe<Scalars['String']>;
  swing_strike_count?: Maybe<Scalars['Int']>;
};

export type EventPlayerSummaryPitchingZoneType = {
  __typename?: 'EventPlayerSummaryPitchingZoneType';
  height_at_plate?: Maybe<Scalars['Float']>;
  pitch_type?: Maybe<Scalars['String']>;
  side_at_plate?: Maybe<Scalars['Float']>;
};

export type EventPlayerSummaryReleasePointType = {
  __typename?: 'EventPlayerSummaryReleasePointType';
  pitch_type?: Maybe<Scalars['String']>;
  release_height?: Maybe<Scalars['Float']>;
  release_side?: Maybe<Scalars['Float']>;
};

export type EventPlayerSummaryType = {
  __typename?: 'EventPlayerSummaryType';
  hitter_unique_pitches?: Maybe<Array<Maybe<Scalars['String']>>>;
  hitting_summary_table_rows?: Maybe<
    Array<Maybe<EventPlayerSummaryHittingTableType>>
  >;
  hitting_zone_chart_rows?: Maybe<
    Array<Maybe<EventPlayerSummaryHittingZoneType>>
  >;
  pitcher_unique_pitches?: Maybe<Array<Maybe<Scalars['String']>>>;
  pitching_summary_table_rows?: Maybe<
    Array<Maybe<EventPlayerSummaryPitchingTableType>>
  >;
  pitching_zone_chart_rows?: Maybe<
    Array<Maybe<EventPlayerSummaryPitchingZoneType>>
  >;
  release_point_chart_rows?: Maybe<
    Array<Maybe<EventPlayerSummaryReleasePointType>>
  >;
};

export type EventProfileInput = {
  name?: Maybe<Scalars['String']>;
  profile: Scalars['ID'];
};

export type EventRowsResult = {
  __typename?: 'EventRowsResult';
  event_rows?: Maybe<Array<Maybe<FlightScopeDataRowType>>>;
  total_count?: Maybe<Scalars['Int']>;
};

export type EventUmpireSummaryPlateType = {
  __typename?: 'EventUmpireSummaryPlateType';
  height_at_plate?: Maybe<Scalars['Float']>;
  pitch_call?: Maybe<Scalars['String']>;
  side_at_plate?: Maybe<Scalars['Float']>;
};

export type EventUmpireSummaryType = {
  __typename?: 'EventUmpireSummaryType';
  summary_rows?: Maybe<Array<Maybe<EventUmpireSummaryPlateType>>>;
};

export type Facility = {
  __typename?: 'Facility';
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  u_name?: Maybe<Scalars['String']>;
};

export type FacilityInput = {
  id: Scalars['ID'];
  email?: Maybe<Scalars['String']>;
  u_name?: Maybe<Scalars['String']>;
};

export type FacilityRowsResult = {
  __typename?: 'FacilityRowsResult';
  facilities?: Maybe<Array<Maybe<Facility>>>;
  total_count?: Maybe<Scalars['Int']>;
};

export type FilterBattingLogInput = {
  profile_id: Scalars['ID'];
  pitcher_name?: Maybe<Scalars['String']>;
  pitch_type?: Maybe<Scalars['String']>;
  offset?: Maybe<Scalars['Int']>;
  count?: Maybe<Scalars['Int']>;
};

export type FilterBattingLogResult = {
  __typename?: 'FilterBattingLogResult';
  batting_log?: Maybe<Array<Maybe<BattingData>>>;
  total_count?: Maybe<Scalars['Int']>;
};

export type FilterEventDetailInput = {
  profile_id: Scalars['ID'];
  event_id: Scalars['ID'];
};

export type FilterEventRowsInput = {
  event_id: Scalars['ID'];
  profile_id: Scalars['ID'];
  offset?: Maybe<Scalars['Int']>;
  count?: Maybe<Scalars['Int']>;
};

export type FilterEventsInput = {
  date?: Maybe<Scalars['String']>;
  event_name?: Maybe<Scalars['String']>;
  event_type?: Maybe<Scalars['String']>;
  team?: Maybe<Scalars['String']>;
  offset: Scalars['Int'];
  count: Scalars['Int'];
};

export type FilterEventsResult = {
  __typename?: 'FilterEventsResult';
  events?: Maybe<Array<Maybe<Event>>>;
  total_count?: Maybe<Scalars['Int']>;
};

export type FilterFacilityInput = {
  player_name?: Maybe<Scalars['String']>;
  event?: Maybe<Scalars['ID']>;
  offset?: Maybe<Scalars['Int']>;
  count?: Maybe<Scalars['Int']>;
};

export type FilterFacilityResult = {
  __typename?: 'FilterFacilityResult';
  facility_profiles?: Maybe<Array<Maybe<Profile>>>;
  total_count?: Maybe<Scalars['Int']>;
};

export type FilterGraphInput = {
  profile_id: Scalars['ID'];
  pitch_type?: Maybe<Scalars['String']>;
};

export type FilterGraphResultType = {
  __typename?: 'FilterGraphResultType';
  graph_rows?: Maybe<Array<Maybe<Scalars['Int']>>>;
};

export type FilterLeaderboardBattingResult = {
  __typename?: 'FilterLeaderboardBattingResult';
  leaderboard_batting?: Maybe<Array<Maybe<FlightScopeDataRowType>>>;
};

export type FilterLeaderboardInput = {
  date?: Maybe<Scalars['String']>;
  school?: Maybe<Scalars['String']>;
  team?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  age?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  favorite?: Maybe<Scalars['Int']>;
};

export type FilterLeaderboardPitchingResult = {
  __typename?: 'FilterLeaderboardPitchingResult';
  leaderboard_pitching?: Maybe<Array<Maybe<FlightScopeDataRowType>>>;
};

export type FilterNotificationsInput = {
  offset: Scalars['Int'];
  count: Scalars['Int'];
};

export type FilterPitchingLogInput = {
  profile_id: Scalars['ID'];
  batter_name?: Maybe<Scalars['String']>;
  pitch_type?: Maybe<Scalars['String']>;
  offset?: Maybe<Scalars['Int']>;
  count?: Maybe<Scalars['Int']>;
};

export type FilterPitchingLogResult = {
  __typename?: 'FilterPitchingLogResult';
  pitching_log?: Maybe<Array<Maybe<PitchingData>>>;
  total_count?: Maybe<Scalars['Int']>;
};

export type FilterPlayerDevelopmentInput = {
  profile_id: Scalars['ID'];
  events_id: Array<Maybe<Scalars['ID']>>;
};

export type FilterProfileEventsInput = {
  profile_id: Scalars['ID'];
  date?: Maybe<Scalars['String']>;
  event_type?: Maybe<Scalars['String']>;
  offset: Scalars['Int'];
  count: Scalars['Int'];
};

export type FilterProfileEventsResult = {
  __typename?: 'FilterProfileEventsResult';
  events?: Maybe<Array<Maybe<Event>>>;
  total_count?: Maybe<Scalars['Int']>;
};

export type FilterProfileNamesInput = {
  player_name?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
};

export type FilterProfilesInput = {
  player_name?: Maybe<Scalars['String']>;
  school?: Maybe<Scalars['String']>;
  team?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  event?: Maybe<Scalars['ID']>;
  age?: Maybe<Scalars['Int']>;
  favorite?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  profiles_count?: Maybe<Scalars['Int']>;
};

export type FilterProfilesResult = {
  __typename?: 'FilterProfilesResult';
  profiles?: Maybe<Array<Maybe<Profile>>>;
  total_count?: Maybe<Scalars['Int']>;
};

export type FilterTeamInput = {
  player_name?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  event?: Maybe<Scalars['ID']>;
  offset?: Maybe<Scalars['Int']>;
  count?: Maybe<Scalars['Int']>;
};

export type FilterTeamResult = {
  __typename?: 'FilterTeamResult';
  team_profiles?: Maybe<Array<Maybe<TcProfileType>>>;
  total_count?: Maybe<Scalars['Int']>;
};

export type FlightScopeDataRowType = {
  __typename?: 'FlightScopeDataRowType';
  age?: Maybe<Scalars['Int']>;
  batter_datraks_id?: Maybe<Scalars['Float']>;
  batter_name?: Maybe<Scalars['String']>;
  direction?: Maybe<Scalars['Float']>;
  distance?: Maybe<Scalars['Float']>;
  exit_velocity?: Maybe<Scalars['Float']>;
  extension?: Maybe<Scalars['Float']>;
  favorite?: Maybe<Scalars['Boolean']>;
  hang_time?: Maybe<Scalars['Float']>;
  height_at_plate?: Maybe<Scalars['Float']>;
  hit_spin_rate?: Maybe<Scalars['Float']>;
  horizontal_break?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['ID']>;
  launch_angle?: Maybe<Scalars['Float']>;
  pitch_call?: Maybe<Scalars['String']>;
  pitch_type?: Maybe<Scalars['String']>;
  pitcher_datraks_id?: Maybe<Scalars['Float']>;
  pitcher_handedness?: Maybe<Scalars['String']>;
  pitcher_name?: Maybe<Scalars['String']>;
  release_side?: Maybe<Scalars['Float']>;
  school?: Maybe<School>;
  spin_rate?: Maybe<Scalars['Float']>;
  teams?: Maybe<Array<Maybe<Team>>>;
  velocity?: Maybe<Scalars['Float']>;
  vertical_break?: Maybe<Scalars['Float']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  add_billing_method?: Maybe<AddBillingMethodPayload>;
  parse_events?: Maybe<ParseEventsPayload>;
  remove_billing_method?: Maybe<RemoveBillingMethodPayload>;
  subscription?: Maybe<SubscriptionPayload>;
  unsubscribe?: Maybe<UnsubscribePayload>;
  update_favorite_profile?: Maybe<UpdateFavoriteProfilePayload>;
  update_notification?: Maybe<UpdateNotificationPayload>;
  update_profile?: Maybe<UpdateProfilePayload>;
  update_tc_profile?: Maybe<UpdateTcProfilePayload>;
};

export type MutationAdd_Billing_MethodArgs = {
  input: AddBillingMethodInput;
};

export type MutationParse_EventsArgs = {
  input: ParseEventsInput;
};

export type MutationRemove_Billing_MethodArgs = {
  input: RemoveBillingMethodInput;
};

export type MutationSubscriptionArgs = {
  input: SubscriptionInput;
};

export type MutationUnsubscribeArgs = {
  input: UnsubscribeInput;
};

export type MutationUpdate_Favorite_ProfileArgs = {
  input: UpdateFavoriteProfileInput;
};

export type MutationUpdate_NotificationArgs = {
  input: UpdateNotificationInput;
};

export type MutationUpdate_ProfileArgs = {
  input: UpdateProfileInput;
};

export type MutationUpdate_Tc_ProfileArgs = {
  input: UpdateTcProfileInput;
};

export type Notification = {
  __typename?: 'Notification';
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  link?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

export type NotificationRowsResult = {
  __typename?: 'NotificationRowsResult';
  notifications?: Maybe<Array<Maybe<Notification>>>;
  total_count?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of ParseEvents */
export type ParseEventsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  csv_manager_id: Scalars['ID'];
  session?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  profiles: Array<Maybe<EventProfileInput>>;
};

/** Autogenerated return type of ParseEvents */
export type ParseEventsPayload = {
  __typename?: 'ParseEventsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
};

export type PitchingData = {
  __typename?: 'PitchingData';
  batter_datraks_id?: Maybe<Scalars['Int']>;
  batter_handedness?: Maybe<Scalars['String']>;
  batter_name?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  extension?: Maybe<Scalars['String']>;
  hang_time?: Maybe<Scalars['String']>;
  height_at_plate?: Maybe<Scalars['Int']>;
  horizontal_break?: Maybe<Scalars['Int']>;
  pitch_call?: Maybe<Scalars['String']>;
  pitch_type?: Maybe<Scalars['String']>;
  pitcher_datraks_id?: Maybe<Scalars['Int']>;
  release_height?: Maybe<Scalars['Int']>;
  release_side?: Maybe<Scalars['Int']>;
  spin_axis?: Maybe<Scalars['Int']>;
  spin_rate?: Maybe<Scalars['Int']>;
  tilt?: Maybe<Scalars['Int']>;
  velocity?: Maybe<Scalars['Float']>;
  vertical_break?: Maybe<Scalars['Int']>;
};

export type Plan = {
  __typename?: 'Plan';
  id: Scalars['ID'];
  price?: Maybe<Scalars['Float']>;
};

export type PlanRowsResult = {
  __typename?: 'PlanRowsResult';
  plans?: Maybe<Array<Maybe<Plan>>>;
  total_count?: Maybe<Scalars['Int']>;
};

export type PlayerDevelopmentChartType = {
  __typename?: 'PlayerDevelopmentChartType';
  hitting_summary_table_rows?: Maybe<
    Array<Maybe<EventPlayerSummaryHittingTableType>>
  >;
  pitcher_unique_pitches?: Maybe<Array<Maybe<Scalars['String']>>>;
  pitching_zone_chart_rows?: Maybe<
    Array<Maybe<EventPlayerSummaryPitchingZoneType>>
  >;
  release_point_chart_rows?: Maybe<
    Array<Maybe<EventPlayerSummaryReleasePointType>>
  >;
};

export type PlayerDevelopmentPlateRowType = {
  __typename?: 'PlayerDevelopmentPlateRowType';
  batter_name?: Maybe<Scalars['String']>;
  batter_team?: Maybe<Scalars['String']>;
  o_zone_pitches?: Maybe<Scalars['Int']>;
  o_zone_swings?: Maybe<Scalars['Int']>;
  pitch_count?: Maybe<Scalars['Int']>;
  pitch_type?: Maybe<Scalars['String']>;
  pitcher_name?: Maybe<Scalars['String']>;
  pitcher_team?: Maybe<Scalars['String']>;
  z_zone_pitches?: Maybe<Scalars['Int']>;
  z_zone_swings?: Maybe<Scalars['Int']>;
};

export type PlayerDevelopmentPlateType = {
  __typename?: 'PlayerDevelopmentPlateType';
  hitter_swing_miss_calc_rows?: Maybe<
    Array<Maybe<PlayerDevelopmentPlateRowType>>
  >;
  pitcher_swing_miss_calc_rows?: Maybe<
    Array<Maybe<PlayerDevelopmentPlateRowType>>
  >;
};

export type PlayerDevelopmentSummaryRowType = {
  __typename?: 'PlayerDevelopmentSummaryRowType';
  distance?: Maybe<Scalars['String']>;
  exit_velocity?: Maybe<Scalars['String']>;
  launch_angle?: Maybe<Scalars['String']>;
  pitch_type?: Maybe<Scalars['String']>;
  spin_rate?: Maybe<Scalars['String']>;
  velocity?: Maybe<Scalars['String']>;
};

export type PlayerDevelopmentSummaryType = {
  __typename?: 'PlayerDevelopmentSummaryType';
  batting_calc_avg_rows?: Maybe<Array<Maybe<PlayerDevelopmentSummaryRowType>>>;
  batting_calc_max_rows?: Maybe<Array<Maybe<PlayerDevelopmentSummaryRowType>>>;
  pitching_calc_avg_rows?: Maybe<Array<Maybe<PlayerDevelopmentSummaryRowType>>>;
  pitching_calc_max_rows?: Maybe<Array<Maybe<PlayerDevelopmentSummaryRowType>>>;
};

export type Profile = {
  __typename?: 'Profile';
  act_score?: Maybe<Scalars['Float']>;
  age?: Maybe<Scalars['Int']>;
  avatar?: Maybe<Scalars['String']>;
  avatar_20_20?: Maybe<Scalars['String']>;
  avatar_32_32?: Maybe<Scalars['String']>;
  avatar_40_40?: Maybe<Scalars['String']>;
  bats_hand?: Maybe<Scalars['String']>;
  batter_summary?: Maybe<Array<Maybe<FlightScopeDataRowType>>>;
  batting_data?: Maybe<Array<Maybe<BattingData>>>;
  batting_top_values?: Maybe<Array<Maybe<FlightScopeDataRowType>>>;
  biography?: Maybe<Scalars['String']>;
  broad_jump?: Maybe<Scalars['Float']>;
  events?: Maybe<Array<Maybe<Event>>>;
  events_opened?: Maybe<Scalars['Boolean']>;
  facilities?: Maybe<Array<Maybe<Facility>>>;
  favorite?: Maybe<Scalars['Boolean']>;
  feet?: Maybe<Scalars['Int']>;
  first_name?: Maybe<Scalars['String']>;
  gpa_score?: Maybe<Scalars['Float']>;
  grip_left?: Maybe<Scalars['Float']>;
  grip_right?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  inches?: Maybe<Scalars['Int']>;
  last_name?: Maybe<Scalars['String']>;
  paid?: Maybe<Scalars['Boolean']>;
  pitcher_summary?: Maybe<Array<Maybe<FlightScopeDataRowType>>>;
  pitching_data?: Maybe<Array<Maybe<PitchingData>>>;
  pitching_top_values?: Maybe<Array<Maybe<FlightScopeDataRowType>>>;
  position?: Maybe<Scalars['String']>;
  position2?: Maybe<Scalars['String']>;
  recent_events?: Maybe<Array<Maybe<Event>>>;
  role?: Maybe<Scalars['String']>;
  sat_score?: Maybe<Scalars['Float']>;
  school?: Maybe<School>;
  school_year?: Maybe<Scalars['String']>;
  teams?: Maybe<Array<Maybe<Team>>>;
  throws_hand?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['Int']>;
  winsgspan?: Maybe<Scalars['Float']>;
  wrist_to_elbow?: Maybe<Scalars['Float']>;
};

export type ProfileNamesResultType = {
  __typename?: 'ProfileNamesResultType';
  profile_names?: Maybe<Array<Maybe<Profile>>>;
};

export type Query = {
  __typename?: 'Query';
  batting_graph?: Maybe<FilterGraphResultType>;
  batting_log?: Maybe<FilterBattingLogResult>;
  batting_summary?: Maybe<SummaryResult>;
  billing_methods?: Maybe<BillingMethodRowsResult>;
  current_profile?: Maybe<Profile>;
  current_user?: Maybe<User>;
  event?: Maybe<Event>;
  event_detail?: Maybe<EventDetailType>;
  event_hitting_summary?: Maybe<EventHittingSummaryType>;
  event_mlb_comparison?: Maybe<EventMlbComparisonType>;
  event_pitching_summary?: Maybe<EventPitchingSummaryType>;
  event_player_summary?: Maybe<EventPlayerSummaryType>;
  event_rows?: Maybe<EventRowsResult>;
  event_umpire_summary?: Maybe<EventUmpireSummaryType>;
  events?: Maybe<FilterEventsResult>;
  facilities?: Maybe<FacilityRowsResult>;
  leaderboard_batting?: Maybe<FilterLeaderboardBattingResult>;
  leaderboard_pitching?: Maybe<FilterLeaderboardPitchingResult>;
  my_facility?: Maybe<FilterFacilityResult>;
  my_favorite?: Maybe<FilterProfilesResult>;
  my_team?: Maybe<FilterTeamResult>;
  notifications?: Maybe<NotificationRowsResult>;
  pitching_graph?: Maybe<FilterGraphResultType>;
  pitching_log?: Maybe<FilterPitchingLogResult>;
  pitching_summary?: Maybe<SummaryResult>;
  plans?: Maybe<PlanRowsResult>;
  player_development_chart?: Maybe<PlayerDevelopmentChartType>;
  player_development_plate?: Maybe<PlayerDevelopmentPlateType>;
  player_development_summary?: Maybe<PlayerDevelopmentSummaryType>;
  profile?: Maybe<Profile>;
  profile_events?: Maybe<FilterProfileEventsResult>;
  profile_names?: Maybe<ProfileNamesResultType>;
  profiles?: Maybe<FilterProfilesResult>;
  schools?: Maybe<SchoolRowsResult>;
  tc_batting_graph?: Maybe<FilterGraphResultType>;
  tc_batting_log?: Maybe<FilterBattingLogResult>;
  tc_batting_summary?: Maybe<SummaryResult>;
  tc_event?: Maybe<TcEventType>;
  tc_event_detail?: Maybe<EventDetailType>;
  tc_event_hitting_summary?: Maybe<EventHittingSummaryType>;
  tc_event_mlb_comparison?: Maybe<EventMlbComparisonType>;
  tc_event_pitching_summary?: Maybe<EventPitchingSummaryType>;
  tc_event_player_summary?: Maybe<EventPlayerSummaryType>;
  tc_event_rows?: Maybe<EventRowsResult>;
  tc_event_umpire_summary?: Maybe<EventUmpireSummaryType>;
  tc_pitching_graph?: Maybe<FilterGraphResultType>;
  tc_pitching_log?: Maybe<FilterPitchingLogResult>;
  tc_pitching_summary?: Maybe<SummaryResult>;
  tc_player_development_chart?: Maybe<PlayerDevelopmentChartType>;
  tc_player_development_plate?: Maybe<PlayerDevelopmentPlateType>;
  tc_player_development_summary?: Maybe<PlayerDevelopmentSummaryType>;
  tc_profile?: Maybe<TcProfileType>;
  tc_profile_events?: Maybe<FilterProfileEventsResult>;
  tc_profile_names?: Maybe<ProfileNamesResultType>;
  teams?: Maybe<TeamRowsResult>;
};

export type QueryBatting_GraphArgs = {
  input: FilterGraphInput;
};

export type QueryBatting_LogArgs = {
  input: FilterBattingLogInput;
};

export type QueryBatting_SummaryArgs = {
  id: Scalars['ID'];
};

export type QueryEventArgs = {
  id: Scalars['ID'];
};

export type QueryEvent_DetailArgs = {
  input: FilterEventDetailInput;
};

export type QueryEvent_Hitting_SummaryArgs = {
  input: FilterEventDetailInput;
};

export type QueryEvent_Mlb_ComparisonArgs = {
  input: FilterEventDetailInput;
};

export type QueryEvent_Pitching_SummaryArgs = {
  input: FilterEventDetailInput;
};

export type QueryEvent_Player_SummaryArgs = {
  input: FilterEventDetailInput;
};

export type QueryEvent_RowsArgs = {
  input: FilterEventRowsInput;
};

export type QueryEvent_Umpire_SummaryArgs = {
  input: FilterEventDetailInput;
};

export type QueryEventsArgs = {
  input: FilterEventsInput;
};

export type QueryFacilitiesArgs = {
  search: Scalars['String'];
};

export type QueryLeaderboard_BattingArgs = {
  input: FilterLeaderboardInput;
};

export type QueryLeaderboard_PitchingArgs = {
  input: FilterLeaderboardInput;
};

export type QueryMy_FacilityArgs = {
  input: FilterFacilityInput;
};

export type QueryMy_FavoriteArgs = {
  input: FilterProfilesInput;
};

export type QueryMy_TeamArgs = {
  input: FilterTeamInput;
};

export type QueryNotificationsArgs = {
  input: FilterNotificationsInput;
};

export type QueryPitching_GraphArgs = {
  input: FilterGraphInput;
};

export type QueryPitching_LogArgs = {
  input: FilterPitchingLogInput;
};

export type QueryPitching_SummaryArgs = {
  id: Scalars['ID'];
};

export type QueryPlayer_Development_ChartArgs = {
  input: FilterPlayerDevelopmentInput;
};

export type QueryPlayer_Development_PlateArgs = {
  input: FilterPlayerDevelopmentInput;
};

export type QueryPlayer_Development_SummaryArgs = {
  input: FilterPlayerDevelopmentInput;
};

export type QueryProfileArgs = {
  id: Scalars['String'];
};

export type QueryProfile_EventsArgs = {
  input: FilterProfileEventsInput;
};

export type QueryProfile_NamesArgs = {
  input: FilterProfileNamesInput;
};

export type QueryProfilesArgs = {
  input: FilterProfilesInput;
};

export type QuerySchoolsArgs = {
  search: Scalars['String'];
};

export type QueryTc_Batting_GraphArgs = {
  input: FilterGraphInput;
};

export type QueryTc_Batting_LogArgs = {
  input: FilterBattingLogInput;
};

export type QueryTc_Batting_SummaryArgs = {
  id: Scalars['ID'];
};

export type QueryTc_EventArgs = {
  id: Scalars['ID'];
};

export type QueryTc_Event_DetailArgs = {
  input: FilterEventDetailInput;
};

export type QueryTc_Event_Hitting_SummaryArgs = {
  input: FilterEventDetailInput;
};

export type QueryTc_Event_Mlb_ComparisonArgs = {
  input: FilterEventDetailInput;
};

export type QueryTc_Event_Pitching_SummaryArgs = {
  input: FilterEventDetailInput;
};

export type QueryTc_Event_Player_SummaryArgs = {
  input: FilterEventDetailInput;
};

export type QueryTc_Event_RowsArgs = {
  input: FilterEventRowsInput;
};

export type QueryTc_Event_Umpire_SummaryArgs = {
  input: FilterEventDetailInput;
};

export type QueryTc_Pitching_GraphArgs = {
  input: FilterGraphInput;
};

export type QueryTc_Pitching_LogArgs = {
  input: FilterPitchingLogInput;
};

export type QueryTc_Pitching_SummaryArgs = {
  id: Scalars['ID'];
};

export type QueryTc_Player_Development_ChartArgs = {
  input: FilterPlayerDevelopmentInput;
};

export type QueryTc_Player_Development_PlateArgs = {
  input: FilterPlayerDevelopmentInput;
};

export type QueryTc_Player_Development_SummaryArgs = {
  input: FilterPlayerDevelopmentInput;
};

export type QueryTc_ProfileArgs = {
  id: Scalars['String'];
};

export type QueryTc_Profile_EventsArgs = {
  input: FilterProfileEventsInput;
};

export type QueryTc_Profile_NamesArgs = {
  input: FilterProfileNamesInput;
};

export type QueryTeamsArgs = {
  search: Scalars['String'];
};

export type RecentAvatarsType = {
  __typename?: 'RecentAvatarsType';
  avatar?: Maybe<Scalars['String']>;
  avatar_20_20?: Maybe<Scalars['String']>;
  avatar_32_32?: Maybe<Scalars['String']>;
  avatar_40_40?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  last_name?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of RemoveBillingMethod */
export type RemoveBillingMethodInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RemoveBillingMethod */
export type RemoveBillingMethodPayload = {
  __typename?: 'RemoveBillingMethodPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
};

export type School = {
  __typename?: 'School';
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};

export type SchoolInput = {
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};

export type SchoolRowsResult = {
  __typename?: 'SchoolRowsResult';
  schools?: Maybe<Array<Maybe<School>>>;
  total_count?: Maybe<Scalars['Int']>;
};

export type Subscription = {
  __typename?: 'Subscription';
  plan_id?: Maybe<Scalars['ID']>;
  subscribed_at?: Maybe<Scalars['String']>;
  subscription_expires_at?: Maybe<Scalars['String']>;
  subscription_status?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of Subscription */
export type SubscriptionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  plan_id: Scalars['ID'];
};

/** Autogenerated return type of Subscription */
export type SubscriptionPayload = {
  __typename?: 'SubscriptionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  subscription?: Maybe<Subscription>;
};

export type SummaryResult = {
  __typename?: 'SummaryResult';
  average_values?: Maybe<Array<Maybe<FlightScopeDataRowType>>>;
  top_values?: Maybe<Array<Maybe<FlightScopeDataRowType>>>;
};

export type TcEventType = {
  __typename?: 'TcEventType';
  date?: Maybe<Scalars['String']>;
  event_name?: Maybe<Scalars['String']>;
  event_type?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  recent_avatars?: Maybe<Array<Maybe<RecentAvatarsType>>>;
};

export type TcProfileType = {
  __typename?: 'TcProfileType';
  act_score?: Maybe<Scalars['Float']>;
  age?: Maybe<Scalars['Int']>;
  avatar?: Maybe<Scalars['String']>;
  avatar_20_20?: Maybe<Scalars['String']>;
  avatar_32_32?: Maybe<Scalars['String']>;
  avatar_40_40?: Maybe<Scalars['String']>;
  bats_hand?: Maybe<Scalars['String']>;
  batter_summary?: Maybe<Array<Maybe<FlightScopeDataRowType>>>;
  batting_data?: Maybe<Array<Maybe<BattingData>>>;
  batting_top_values?: Maybe<Array<Maybe<FlightScopeDataRowType>>>;
  biography?: Maybe<Scalars['String']>;
  broad_jump?: Maybe<Scalars['Float']>;
  events?: Maybe<Array<Maybe<TcEventType>>>;
  feet?: Maybe<Scalars['Int']>;
  first_name?: Maybe<Scalars['String']>;
  gpa_score?: Maybe<Scalars['Float']>;
  grip_left?: Maybe<Scalars['Float']>;
  grip_right?: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  inches?: Maybe<Scalars['Int']>;
  last_name?: Maybe<Scalars['String']>;
  pitcher_summary?: Maybe<Array<Maybe<FlightScopeDataRowType>>>;
  pitching_data?: Maybe<Array<Maybe<PitchingData>>>;
  pitching_top_values?: Maybe<Array<Maybe<FlightScopeDataRowType>>>;
  position?: Maybe<Scalars['String']>;
  position2?: Maybe<Scalars['String']>;
  recent_events?: Maybe<Array<Maybe<TcEventType>>>;
  role?: Maybe<Scalars['String']>;
  sat_score?: Maybe<Scalars['Float']>;
  school?: Maybe<Scalars['String']>;
  school_year?: Maybe<Scalars['String']>;
  summer_team?: Maybe<Scalars['String']>;
  throws_hand?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['Int']>;
  winsgspan?: Maybe<Scalars['Float']>;
  wrist_to_elbow?: Maybe<Scalars['Float']>;
};

export type Team = {
  __typename?: 'Team';
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};

export type TeamInput = {
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};

export type TeamRowsResult = {
  __typename?: 'TeamRowsResult';
  teams?: Maybe<Array<Maybe<Team>>>;
  total_count?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of Unsubscribe */
export type UnsubscribeInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  unsubscribe?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated return type of Unsubscribe */
export type UnsubscribePayload = {
  __typename?: 'UnsubscribePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  unsubscribe?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated input type of UpdateFavoriteProfile */
export type UpdateFavoriteProfileInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  profile_id: Scalars['ID'];
  favorite?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated return type of UpdateFavoriteProfile */
export type UpdateFavoriteProfilePayload = {
  __typename?: 'UpdateFavoriteProfilePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  favorite?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated input type of UpdateNotification */
export type UpdateNotificationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  status?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated return type of UpdateNotification */
export type UpdateNotificationPayload = {
  __typename?: 'UpdateNotificationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  recent_notifications?: Maybe<Array<Maybe<Notification>>>;
};

/** Autogenerated input type of UpdateProfile */
export type UpdateProfileInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  first_name?: Maybe<Scalars['String']>;
  last_name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  position2?: Maybe<Scalars['String']>;
  age?: Maybe<Scalars['Int']>;
  feet?: Maybe<Scalars['Int']>;
  inches?: Maybe<Scalars['Int']>;
  weight?: Maybe<Scalars['Int']>;
  throws_hand?: Maybe<Scalars['String']>;
  bats_hand?: Maybe<Scalars['String']>;
  school_year?: Maybe<Scalars['String']>;
  biography?: Maybe<Scalars['String']>;
  school?: Maybe<SchoolInput>;
  teams: Array<Maybe<TeamInput>>;
  facilities: Array<Maybe<FacilityInput>>;
};

/** Autogenerated return type of UpdateProfile */
export type UpdateProfilePayload = {
  __typename?: 'UpdateProfilePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  profile?: Maybe<Profile>;
};

/** Autogenerated input type of UpdateTcProfile */
export type UpdateTcProfileInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  first_name?: Maybe<Scalars['String']>;
  last_name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  position2?: Maybe<Scalars['String']>;
  age?: Maybe<Scalars['Int']>;
  feet?: Maybe<Scalars['Int']>;
  inches?: Maybe<Scalars['Int']>;
  weight?: Maybe<Scalars['Int']>;
  throws_hand?: Maybe<Scalars['String']>;
  bats_hand?: Maybe<Scalars['String']>;
  school_year?: Maybe<Scalars['String']>;
  biography?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateTcProfile */
export type UpdateTcProfilePayload = {
  __typename?: 'UpdateTcProfilePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  profile?: Maybe<TcProfileType>;
};

export type User = {
  __typename?: 'User';
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

export type ProfileQueryVariables = Exact<{ [key: string]: never }>;

export type ProfileQuery = { __typename?: 'Query' } & {
  current_profile?: Maybe<
    { __typename?: 'Profile' } & Pick<
      Profile,
      | 'id'
      | 'first_name'
      | 'last_name'
      | 'position'
      | 'position2'
      | 'avatar'
      | 'throws_hand'
      | 'bats_hand'
      | 'biography'
      | 'school_year'
      | 'feet'
      | 'inches'
      | 'weight'
      | 'age'
    > & {
        school?: Maybe<{ __typename?: 'School' } & Pick<School, 'id' | 'name'>>;
        teams?: Maybe<
          Array<Maybe<{ __typename?: 'Team' } & Pick<Team, 'id' | 'name'>>>
        >;
        facilities?: Maybe<
          Array<
            Maybe<
              { __typename?: 'Facility' } & Pick<
                Facility,
                'id' | 'email' | 'u_name'
              >
            >
          >
        >;
      }
  >;
};

export const ProfileDocument = gql`
  query Profile {
    current_profile {
      id
      first_name
      last_name
      position
      position2
      avatar
      throws_hand
      bats_hand
      biography
      school_year
      feet
      inches
      weight
      age
      school {
        id
        name
      }
      teams {
        id
        name
      }
      facilities {
        id
        email
        u_name
      }
    }
  }
`;

/**
 * __useProfileQuery__
 *
 * To run a query within a React component, call `useProfileQuery` and pass it any options that fit your needs.
 * When your component renders, `useProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProfileQuery({
 *   variables: {
 *   },
 * });
 */
export function useProfileQuery(
  baseOptions?: Apollo.QueryHookOptions<ProfileQuery, ProfileQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<ProfileQuery, ProfileQueryVariables>(
    ProfileDocument,
    options
  );
}
export function useProfileLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<ProfileQuery, ProfileQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<ProfileQuery, ProfileQueryVariables>(
    ProfileDocument,
    options
  );
}
export type ProfileQueryHookResult = ReturnType<typeof useProfileQuery>;
export type ProfileLazyQueryHookResult = ReturnType<typeof useProfileLazyQuery>;
export type ProfileQueryResult = Apollo.QueryResult<
  ProfileQuery,
  ProfileQueryVariables
>;
